// vite.config.ts
import { defineConfig } from "file:///D:/Personal%20Projects/wavy%20ui/node_modules/vite/dist/node/index.js";
import { resolve } from "path";

// package.json
var peerDependencies = {
  autoprefixer: "^10.0.0",
  postcss: "^8.0.0",
  react: "^18.3.1 || ^19.0.0",
  "react-dom": "^18.3.1 || ^19.0.0",
  tailwindcss: "^3.0.0 || ^4.0.0"
};
var dependencies = {
  "@heroui/react": "^2.7.10",
  "@radix-ui/react-avatar": "^1.0.3",
  "@radix-ui/react-slot": "^1.0.2",
  "class-variance-authority": "^0.6.0",
  clsx: "^1.2.1",
  "lucide-react": "^0.518.0",
  "shadcn-ui-library-starter": "^1.0.3",
  "tailwind-merge": "^1.12.0",
  "tailwindcss-animate": "^1.0.5"
};

// vite.config.ts
import react from "file:///D:/Personal%20Projects/wavy%20ui/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///D:/Personal%20Projects/wavy%20ui/node_modules/vite-plugin-dts/dist/index.mjs";
import tailwindcss from "file:///D:/Personal%20Projects/wavy%20ui/node_modules/tailwindcss/lib/index.js";
var __vite_injected_original_dirname = "D:\\Personal Projects\\wavy ui";
var vite_config_default = defineConfig({
  plugins: [
    react({
      "jsxRuntime": "classic"
    }),
    dts({
      include: ["src/**/*"]
    })
  ],
  css: {
    postcss: {
      plugins: [tailwindcss()]
    }
  },
  build: {
    lib: {
      entry: resolve(__vite_injected_original_dirname, "src", "index.ts"),
      formats: ["es", "cjs"],
      fileName: (ext) => `index.${ext}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies), ...Object.keys(dependencies)],
      output: {
        preserveModules: true,
        exports: "named",
        assetFileNames: "[name][extname]"
      }
    },
    cssCodeSplit: false,
    target: "esnext",
    sourcemap: true
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxcUGVyc29uYWwgUHJvamVjdHNcXFxcd2F2eSB1aVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRDpcXFxcUGVyc29uYWwgUHJvamVjdHNcXFxcd2F2eSB1aVxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRDovUGVyc29uYWwlMjBQcm9qZWN0cy93YXZ5JTIwdWkvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJ1xyXG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCdcclxuaW1wb3J0IHsgcGVlckRlcGVuZGVuY2llcywgZGVwZW5kZW5jaWVzIH0gZnJvbSAnLi9wYWNrYWdlLmpzb24nXHJcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCdcclxuaW1wb3J0IGR0cyBmcm9tICd2aXRlLXBsdWdpbi1kdHMnO1xyXG5pbXBvcnQgdGFpbHdpbmRjc3MgZnJvbSBcInRhaWx3aW5kY3NzXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcclxuICBwbHVnaW5zOiBbXHJcbiAgICByZWFjdCh7XHJcbiAgICAgICdqc3hSdW50aW1lJzogJ2NsYXNzaWMnXHJcbiAgICB9KSxcclxuICAgIGR0cyh7XHJcbiAgICAgIGluY2x1ZGU6IFsnc3JjLyoqLyonXSxcclxuICAgIH0pXHJcbiAgXSxcclxuICBjc3M6IHtcclxuICAgIHBvc3Rjc3M6IHtcclxuICAgICAgcGx1Z2luczogW3RhaWx3aW5kY3NzKCldLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIGJ1aWxkOiB7XHJcbiAgICBsaWI6IHtcclxuICAgICAgZW50cnk6IHJlc29sdmUoX19kaXJuYW1lLCAnc3JjJywgJ2luZGV4LnRzJyksXHJcbiAgICAgIGZvcm1hdHM6IFsnZXMnLCAnY2pzJ10sXHJcbiAgICAgIGZpbGVOYW1lOiAoZXh0KSA9PiBgaW5kZXguJHtleHR9LmpzYCxcclxuICAgIH0sXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGVlckRlcGVuZGVuY2llcyksIC4uLk9iamVjdC5rZXlzKGRlcGVuZGVuY2llcyldLFxyXG4gICAgICBvdXRwdXQ6IHtcclxuICAgICAgICBwcmVzZXJ2ZU1vZHVsZXM6IHRydWUsXHJcbiAgICAgICAgZXhwb3J0czogJ25hbWVkJyxcclxuICAgICAgICBhc3NldEZpbGVOYW1lczogJ1tuYW1lXVtleHRuYW1lXSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNzc0NvZGVTcGxpdDogZmFsc2UsXHJcbiAgICBcclxuICAgIHRhcmdldDogJ2VzbmV4dCcsXHJcbiAgICBzb3VyY2VtYXA6IHRydWVcclxuICB9XHJcbn0pIiwgIntcclxuICBcIm5hbWVcIjogXCJ3YXZ5LXVpXCIsXHJcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkEgcXVpY2sgbGlicmFyeSBzdGFydGVyIGZvciBSZWFjdCB3aXRoIFRhaWx3aW5kIENTUywgVml0ZSwgVHlwZVNjcmlwdCBhbmQgU2hhZGNuLXVpIGNvbXBvbmVudHMuXCIsXHJcbiAgXCJwcml2YXRlXCI6IGZhbHNlLFxyXG4gIFwidmVyc2lvblwiOiBcIjEuMC4xNFwiLFxyXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxyXG4gIFwibWFpblwiOiBcImRpc3QvaW5kZXguY2pzLmpzXCIsXHJcbiAgXCJtb2R1bGVcIjogXCJkaXN0L2luZGV4LmVzLmpzXCIsXHJcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxyXG4gIFwic2lkZUVmZmVjdHNcIjogW1xyXG4gICAgXCIqKi8qLmNzc1wiXHJcbiAgXSxcclxuICBcImZpbGVzXCI6IFtcclxuICAgIFwiZGlzdFwiLFxyXG4gICAgXCJkaXN0L3N0eWxlLmNzc1wiLFxyXG4gICAgXCJkaXN0L2luZGV4LmNzc1wiXHJcbiAgXSxcclxuICBcInN0eWxlXCI6IFwiZGlzdC9zdHlsZS5jc3NcIixcclxuICBcInNhc3NcIjogXCJkaXN0L3N0eWxlLmNzc1wiLFxyXG4gIFwicmVwb3NpdG9yeVwiOiB7XHJcbiAgICBcInR5cGVcIjogXCJnaXRcIixcclxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2FkZXNoaW5nYWxlMy93YXZ5dWkuZ2l0XCJcclxuICB9LFxyXG4gIFwic2NyaXB0c1wiOiB7XHJcbiAgICBcImRldlwiOiBcInZpdGVcIixcclxuICAgIFwiYnVpbGRcIjogXCJ0c2MgJiYgdml0ZSBidWlsZCAmJiBucG0gcnVuIGJ1aWxkOnN0eWxlc1wiLFxyXG4gICAgXCJidWlsZDpzdHlsZXNcIjogXCJwb3N0Y3NzIC4vc3JjL2luZGV4LmNzcyAtbyAuL2Rpc3Qvc3R5bGUuY3NzXCIsXHJcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgc3JjIC0tZXh0IHRzLHRzeCAtLXJlcG9ydC11bnVzZWQtZGlzYWJsZS1kaXJlY3RpdmVzIC0tbWF4LXdhcm5pbmdzIDBcIlxyXG4gIH0sXHJcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiYXV0b3ByZWZpeGVyXCI6IFwiXjEwLjAuMFwiLFxyXG4gICAgXCJwb3N0Y3NzXCI6IFwiXjguMC4wXCIsXHJcbiAgICBcInJlYWN0XCI6IFwiXjE4LjMuMSB8fCBeMTkuMC4wXCIsXHJcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4zLjEgfHwgXjE5LjAuMFwiLFxyXG4gICAgXCJ0YWlsd2luZGNzc1wiOiBcIl4zLjAuMCB8fCBeNC4wLjBcIlxyXG4gIH0sXHJcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJAaGVyb3VpL3JlYWN0XCI6IFwiXjIuNy4xMFwiLFxyXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtYXZhdGFyXCI6IFwiXjEuMC4zXCIsXHJcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI6IFwiXjEuMC4yXCIsXHJcbiAgICBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiOiBcIl4wLjYuMFwiLFxyXG4gICAgXCJjbHN4XCI6IFwiXjEuMi4xXCIsXHJcbiAgICBcImx1Y2lkZS1yZWFjdFwiOiBcIl4wLjUxOC4wXCIsXHJcbiAgICBcInNoYWRjbi11aS1saWJyYXJ5LXN0YXJ0ZXJcIjogXCJeMS4wLjNcIixcclxuICAgIFwidGFpbHdpbmQtbWVyZ2VcIjogXCJeMS4xMi4wXCIsXHJcbiAgICBcInRhaWx3aW5kY3NzLWFuaW1hdGVcIjogXCJeMS4wLjVcIlxyXG4gIH0sXHJcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMC4yOFwiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjAuMTFcIixcclxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNS41Ny4xXCIsXHJcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNS41Ny4xXCIsXHJcbiAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjQuMC4wXCIsXHJcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjIxXCIsXHJcbiAgICBcImVzbGludFwiOiBcIl44LjM4LjBcIixcclxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl40LjYuMFwiLFxyXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC4zLjRcIixcclxuICAgIFwicG9zdGNzc1wiOiBcIl44LjUuNlwiLFxyXG4gICAgXCJwb3N0Y3NzLWNsaVwiOiBcIl4xMC4xLjBcIixcclxuICAgIFwicG9zdGNzcy1wcmVmaXgtc2VsZWN0b3JcIjogXCJeMi4xLjFcIixcclxuICAgIFwicHJvcC10eXBlc1wiOiBcIl4xNS44LjFcIixcclxuICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy40LjE3XCIsXHJcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNS4wLjJcIixcclxuICAgIFwidml0ZVwiOiBcIl40LjMuMlwiLFxyXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMi4zLjBcIlxyXG4gIH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWdSLFNBQVMsb0JBQW9CO0FBQzdTLFNBQVMsZUFBZTs7O0FDNEJ0Qix1QkFBb0I7QUFBQSxFQUNsQixjQUFnQjtBQUFBLEVBQ2hCLFNBQVc7QUFBQSxFQUNYLE9BQVM7QUFBQSxFQUNULGFBQWE7QUFBQSxFQUNiLGFBQWU7QUFDakI7QUFDQSxtQkFBZ0I7QUFBQSxFQUNkLGlCQUFpQjtBQUFBLEVBQ2pCLDBCQUEwQjtBQUFBLEVBQzFCLHdCQUF3QjtBQUFBLEVBQ3hCLDRCQUE0QjtBQUFBLEVBQzVCLE1BQVE7QUFBQSxFQUNSLGdCQUFnQjtBQUFBLEVBQ2hCLDZCQUE2QjtBQUFBLEVBQzdCLGtCQUFrQjtBQUFBLEVBQ2xCLHVCQUF1QjtBQUN6Qjs7O0FEM0NGLE9BQU8sV0FBVztBQUNsQixPQUFPLFNBQVM7QUFDaEIsT0FBTyxpQkFBaUI7QUFMeEIsSUFBTSxtQ0FBbUM7QUFRekMsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsU0FBUztBQUFBLElBQ1AsTUFBTTtBQUFBLE1BQ0osY0FBYztBQUFBLElBQ2hCLENBQUM7QUFBQSxJQUNELElBQUk7QUFBQSxNQUNGLFNBQVMsQ0FBQyxVQUFVO0FBQUEsSUFDdEIsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUNBLEtBQUs7QUFBQSxJQUNILFNBQVM7QUFBQSxNQUNQLFNBQVMsQ0FBQyxZQUFZLENBQUM7QUFBQSxJQUN6QjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxrQ0FBVyxPQUFPLFVBQVU7QUFBQSxNQUMzQyxTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUEsTUFDckIsVUFBVSxDQUFDLFFBQVEsU0FBUztBQUFBLElBQzlCO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixVQUFVLENBQUMsR0FBRyxPQUFPLEtBQUssZ0JBQWdCLEdBQUcsR0FBRyxPQUFPLEtBQUssWUFBWSxDQUFDO0FBQUEsTUFDekUsUUFBUTtBQUFBLFFBQ04saUJBQWlCO0FBQUEsUUFDakIsU0FBUztBQUFBLFFBQ1QsZ0JBQWdCO0FBQUEsTUFDbEI7QUFBQSxJQUNGO0FBQUEsSUFDQSxjQUFjO0FBQUEsSUFFZCxRQUFRO0FBQUEsSUFDUixXQUFXO0FBQUEsRUFDYjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
